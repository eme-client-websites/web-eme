---
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Enlaces del menú
const menuItems = [
  { href: '#servicios', text: lang === 'en' ? 'Services' : 'Servicios' },
  { href: '#proyectos', text: lang === 'en' ? 'Work' : 'Trabajos' },
  { href: '#contacto', text: lang === 'en' ? 'Contact' : 'Contacto' }
];
---

<!-- Botón hamburguesa - Solo desktop, aparece después del hero -->
<button 
  id="desktop-menu-toggle"
  class="hidden xl:flex fixed top-6 right-6 z-[60] w-14 h-14 flex-col items-center justify-center bg-white/10 backdrop-blur-md rounded-full border border-white/20 transition-all duration-300 hover:bg-white/20 opacity-0 invisible"
  aria-label="Toggle menu"
>
  <span class="hamburger-line w-6 h-0.5 bg-white transition-all duration-300 transform-gpu"></span>
  <span class="hamburger-line w-6 h-0.5 bg-white transition-all duration-300 transform-gpu mt-1"></span>
  <span class="hamburger-line w-6 h-0.5 bg-white transition-all duration-300 transform-gpu mt-1"></span>
</button>

<!-- Menú pantalla completa - Solo desktop -->
<div 
  id="desktop-fullscreen-menu" 
  class="hidden xl:block fixed inset-0 z-[55] opacity-0 invisible transition-all duration-500"
  style="background-color: #F1F1F1;"
>
  
  <!-- Logo en el menú -->
  <div class="absolute top-8 left-8">
    <img src="/eme-color.svg" alt="E-ME Growth Agency" class="h-8 w-auto" />
  </div>
  
  <!-- Contenido del menú en 2 columnas -->
  <div class="flex h-full">
    <!-- Columna izquierda: Navegación -->
    <div class="flex-1 flex flex-col justify-center pl-16">
      <nav>
        <ul class="space-y-2">
          {menuItems.map((item, index) => (
            <li style={`animation-delay: ${(index + 1) * 150}ms`} class="menu-item-desktop opacity-0">
              <a 
                href={item.href}
                class="group block text-black hover:text-gray-600 transition-all duration-300 text-8xl font-bold leading-none"
              >
                <span class="group-hover:translate-x-4 transition-transform duration-300 inline-block">
                  {item.text}
                </span>
              </a>
            </li>
          ))}
        </ul>
      </nav>
    </div>
    
    <!-- Columna derecha: Información de contacto y redes -->
    <div class="flex flex-col justify-center items-end pr-16 space-y-8">
      <!-- Redes sociales -->
      <div class="menu-item-desktop opacity-0 flex space-x-4" style="animation-delay: 600ms">
        <!-- Instagram -->
        <a href="#" class="w-10 h-10 bg-gray-300 hover:bg-gray-400 rounded-full flex items-center justify-center text-black transition-colors">
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
          </svg>
        </a>
        <!-- Facebook -->
        <a href="#" class="w-10 h-10 bg-gray-300 hover:bg-gray-400 rounded-full flex items-center justify-center text-black transition-colors">
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
          </svg>
        </a>
        <!-- X (Twitter) -->
        <a href="#" class="w-10 h-10 bg-gray-300 hover:bg-gray-400 rounded-full flex items-center justify-center text-black transition-colors">
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
          </svg>
        </a>
        <!-- LinkedIn -->
        <a href="#" class="w-10 h-10 bg-gray-300 hover:bg-gray-400 rounded-full flex items-center justify-center text-black transition-colors">
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
          </svg>
        </a>
        <!-- YouTube -->
        <a href="#" class="w-10 h-10 bg-gray-300 hover:bg-gray-400 rounded-full flex items-center justify-center text-black transition-colors">
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
          </svg>
        </a>
      </div>
      
      <!-- Información de contacto -->
      <div class="menu-item-desktop opacity-0 text-right" style="animation-delay: 700ms">
        <div class="text-black text-lg space-y-2">
          <p class="text-sm text-gray-600">(Consultas)</p>
          <p class="font-medium">info@eme-agency.com</p>
          <p class="text-sm text-gray-600 mt-4">(Teléfono)</p>
          <p class="font-medium">+57 123 456 789</p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Función súper simple para cerrar
  function closeMenuNow() {
    const menu = document.getElementById('desktop-fullscreen-menu');
    if (menu) {
      menu.classList.add('opacity-0', 'invisible');
      document.body.style.overflow = 'auto';
    }
  }
  
  // La funcionalidad de cerrar ahora está integrada en el botón toggle
  
  document.addEventListener('DOMContentLoaded', () => {
    const heroSection = document.getElementById('inicio');
    const menuToggle = document.getElementById('desktop-menu-toggle');
    const fullscreenMenu = document.getElementById('desktop-fullscreen-menu');
    const menuClose = document.getElementById('desktop-menu-close');
    const hamburgerLines = document.querySelectorAll('.hamburger-line');
    const menuItems = document.querySelectorAll('.menu-item-desktop');
    
    
    let isMenuOpen = false;
    let isDesktop = window.innerWidth >= 1280; // xl breakpoint
    
    // Función para mostrar/ocultar el botón según scroll y detectar fondo
    function handleScroll() {
      if (!isDesktop) return;
      
      const heroRect = heroSection?.getBoundingClientRect();
      const heroBottom = heroRect?.bottom || 0;
      
      // Si el hero ya no está visible (o muy poco visible)
      if (heroBottom <= 100) {
        menuToggle?.classList.remove('opacity-0', 'invisible');
        
        // Detectar color de fondo de la sección actual
        detectBackgroundColor();
      } else {
        menuToggle?.classList.add('opacity-0', 'invisible');
        // Si el menú está abierto y volvemos al hero, cerrarlo
        if (isMenuOpen) {
          closeMenu();
        }
      }
    }
    
    // Función para detectar el color de fondo de la sección actual
    function detectBackgroundColor() {
      const buttonRect = menuToggle?.getBoundingClientRect();
      if (!buttonRect) return;
      
      // Punto central del botón
      const centerX = buttonRect.left + buttonRect.width / 2;
      const centerY = buttonRect.top + buttonRect.height / 2;
      
      // Encontrar el elemento debajo del botón
      const elementBelow = document.elementFromPoint(centerX, centerY + 100); // Un poco más abajo
      
      if (elementBelow) {
        const computedStyle = window.getComputedStyle(elementBelow);
        const bgColor = computedStyle.backgroundColor;
        
        // Verificar si el fondo es claro/blanco
        if (isLightBackground(bgColor, elementBelow)) {
          // Cambiar a modo oscuro
          setDarkMode();
        } else {
          // Cambiar a modo claro
          setLightMode();
        }
      }
    }
    
    // Función para determinar si el fondo es claro
    function isLightBackground(bgColor: string, element: Element): boolean {
      // Buscar en la jerarquía de elementos hasta encontrar un color de fondo
      let currentElement: Element | null = element;
      let currentBg = bgColor;
      
      while (currentElement && (currentBg === 'rgba(0, 0, 0, 0)' || currentBg === 'transparent')) {
        currentElement = currentElement.parentElement;
        if (currentElement) {
          currentBg = window.getComputedStyle(currentElement).backgroundColor;
        }
      }
      
      // Si no encontramos color, asumir que es claro
      if (currentBg === 'rgba(0, 0, 0, 0)' || currentBg === 'transparent') {
        return true;
      }
      
      // Extraer valores RGB
      const rgbMatch = currentBg.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/);
      if (rgbMatch) {
        const r = parseInt(rgbMatch[1]);
        const g = parseInt(rgbMatch[2]);
        const b = parseInt(rgbMatch[3]);
        
        // Calcular luminosidad (fórmula estándar)
        const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
        
        // Si la luminosidad es mayor a 0.6, es un fondo claro
        return luminance > 0.6;
      }
      
      return false;
    }
    
    // Cambiar botón a modo oscuro (para fondos claros)
    function setDarkMode() {
      if (!menuToggle) return;
      
      menuToggle.classList.remove('bg-white/10', 'border-white/20', 'hover:bg-white/20');
      menuToggle.classList.add('bg-black/10', 'border-black/20', 'hover:bg-black/20');
      
      // Solo cambiar color de líneas si el menú NO está abierto
      if (!isMenuOpen) {
        hamburgerLines.forEach(line => {
          (line as HTMLElement).style.backgroundColor = '#0033C4';
        });
      }
    }
    
    // Cambiar botón a modo claro (para fondos oscuros)
    function setLightMode() {
      if (!menuToggle) return;
      
      menuToggle.classList.remove('bg-black/10', 'border-black/20', 'hover:bg-black/20');
      menuToggle.classList.add('bg-white/10', 'border-white/20', 'hover:bg-white/20');
      
      // Solo cambiar color de líneas si el menú NO está abierto
      if (!isMenuOpen) {
        hamburgerLines.forEach(line => {
          (line as HTMLElement).style.backgroundColor = '#ffffff';
        });
      }
    }
    
    function openMenu() {
      isMenuOpen = true;
      fullscreenMenu?.classList.remove('opacity-0', 'invisible');
      document.body.style.overflow = 'hidden';
      
      // Animar hamburger a X perfecta y cambiar color para visibilidad
      if (hamburgerLines.length >= 3) {
        (hamburgerLines[0] as HTMLElement).style.transform = 'rotate(45deg) translate(2px, 6px)';
        (hamburgerLines[0] as HTMLElement).style.backgroundColor = '#000000'; // Negro sobre fondo blanco
        (hamburgerLines[1] as HTMLElement).style.opacity = '0';
        (hamburgerLines[2] as HTMLElement).style.transform = 'rotate(-45deg) translate(2px, -6px)';
        (hamburgerLines[2] as HTMLElement).style.backgroundColor = '#000000'; // Negro sobre fondo blanco
      }
      
      // Animar elementos del menú
      setTimeout(() => {
        menuItems.forEach(item => {
          item.classList.add('animate-slide-in-desktop');
        });
      }, 200);
    }
    
    function closeMenu() {
      isMenuOpen = false;
      fullscreenMenu?.classList.add('opacity-0', 'invisible');
      document.body.style.overflow = 'auto';
      
      // Restaurar hamburger y color original
      if (hamburgerLines.length >= 3) {
        (hamburgerLines[0] as HTMLElement).style.transform = 'none';
        (hamburgerLines[0] as HTMLElement).style.backgroundColor = '#ffffff'; // Restaurar blanco
        (hamburgerLines[1] as HTMLElement).style.opacity = '1';
        (hamburgerLines[2] as HTMLElement).style.transform = 'none';
        (hamburgerLines[2] as HTMLElement).style.backgroundColor = '#ffffff'; // Restaurar blanco
      }
      
      // Quitar animaciones
      menuItems.forEach(item => {
        item.classList.remove('animate-slide-in-desktop');
      });
    }
    
    // Event listeners
    menuToggle?.addEventListener('click', () => {
      if (isMenuOpen) {
        closeMenu();
      } else {
        openMenu();
      }
    });
    
    fullscreenMenu?.addEventListener('click', (e) => {
      if (e.target === fullscreenMenu) closeMenu();
    });
    
    // Cerrar menú al hacer clic en enlaces
    const menuLinks = fullscreenMenu?.querySelectorAll('a[href^="#"]');
    menuLinks?.forEach(link => {
      link.addEventListener('click', () => {
        setTimeout(closeMenu, 300);
      });
    });
    
    // Cerrar con tecla Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isMenuOpen) {
        closeMenu();
      }
    });
    
    // Manejar scroll
    window.addEventListener('scroll', handleScroll);
    
    // Manejar cambios de tamaño de ventana
    window.addEventListener('resize', () => {
      const wasDesktop = isDesktop;
      isDesktop = window.innerWidth >= 1280;
      
      // Si cambiamos de desktop a móvil, cerrar menú
      if (wasDesktop && !isDesktop && isMenuOpen) {
        closeMenu();
      }
      
      // Recalcular scroll
      handleScroll();
    });
    
    // Verificar posición inicial
    handleScroll();
  });
</script>

<style>
  /* Animaciones para el menú desktop */
  @keyframes slideInDesktop {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-slide-in-desktop {
    animation: slideInDesktop 0.6s ease-out forwards;
  }
  
  /* Glassmorphism para el menú */
  #desktop-fullscreen-menu {
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
  }
  
  /* Botón hamburguesa con efecto glassmorphism */
  #desktop-menu-toggle {
    backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
  }
  
  /* Transiciones suaves para el cambio de color */
  #desktop-menu-toggle {
    transition: background-color 0.3s ease, border-color 0.3s ease;
  }
  
  .hamburger-line {
    transition: background-color 0.3s ease, transform 0.3s ease;
  }
  
  #desktop-menu-toggle:hover .hamburger-line {
    background: #3b82f6;
  }
  
  /* Efectos de hover en los enlaces del menú */
  #desktop-fullscreen-menu nav a:hover {
    text-shadow: 0 0 20px rgba(59, 130, 246, 0.5);
  }
  
  /* Animación del botón hamburger */
  .hamburger-line {
    transform-origin: center;
  }
  
  /* Botón cerrar nuevo - simple y limpio */
  #close-button:hover {
    background-color: #d1d5db;
  }
</style>
